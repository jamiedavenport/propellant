/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignRouteImport } from './routes/sign'
import { Route as MainRouteImport } from './routes/_main'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SignUpRouteImport } from './routes/sign/up'
import { Route as SignInRouteImport } from './routes/sign/in'
import { Route as MainInboxRouteImport } from './routes/_main/inbox'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'

const SignRoute = SignRouteImport.update({
  id: '/sign',
  path: '/sign',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpRoute = SignUpRouteImport.update({
  id: '/up',
  path: '/up',
  getParentRoute: () => SignRoute,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/in',
  path: '/in',
  getParentRoute: () => SignRoute,
} as any)
const MainInboxRoute = MainInboxRouteImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => MainRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign': typeof SignRouteWithChildren
  '/inbox': typeof MainInboxRoute
  '/sign/in': typeof SignInRoute
  '/sign/up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign': typeof SignRouteWithChildren
  '/inbox': typeof MainInboxRoute
  '/sign/in': typeof SignInRoute
  '/sign/up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_main': typeof MainRouteWithChildren
  '/sign': typeof SignRouteWithChildren
  '/_main/inbox': typeof MainInboxRoute
  '/sign/in': typeof SignInRoute
  '/sign/up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign' | '/inbox' | '/sign/in' | '/sign/up' | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign' | '/inbox' | '/sign/in' | '/sign/up' | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/sign'
    | '/_main/inbox'
    | '/sign/in'
    | '/sign/up'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRouteWithChildren
  SignRoute: typeof SignRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign': {
      id: '/sign'
      path: '/sign'
      fullPath: '/sign'
      preLoaderRoute: typeof SignRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign/up': {
      id: '/sign/up'
      path: '/up'
      fullPath: '/sign/up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof SignRoute
    }
    '/sign/in': {
      id: '/sign/in'
      path: '/in'
      fullPath: '/sign/in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof SignRoute
    }
    '/_main/inbox': {
      id: '/_main/inbox'
      path: '/inbox'
      fullPath: '/inbox'
      preLoaderRoute: typeof MainInboxRouteImport
      parentRoute: typeof MainRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface MainRouteChildren {
  MainInboxRoute: typeof MainInboxRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainInboxRoute: MainInboxRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

interface SignRouteChildren {
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
}

const SignRouteChildren: SignRouteChildren = {
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
}

const SignRouteWithChildren = SignRoute._addFileChildren(SignRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRouteWithChildren,
  SignRoute: SignRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
